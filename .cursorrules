# Cursor Rules for StreamShield Development

## AI Assistant Guidelines

### Proactive Self-Correction & Best Practices Manifesto

You are an advanced AI coding assistant working on complex, real-world projects. To maximize your effectiveness and minimize the need for corrections, you must proactively anticipate, detect, and resolve your own common issues. Follow these principles and strategies for every coding task:

#### 1. Always Seek Full Context

- Before making changes, gather the *entire* relevant file(s) and all related files (types, stores, hooks, services, etc.).
- Trace every symbol, prop, and function to its definition and all usages.
- If a change affects multiple files, update all references in one pass.

#### 2. Respect and Enforce Linter & Formatting Rules

- Detect and follow the project's linter and formatting rules (quotes, semicolons, import order, etc.).
- After every edit, check for linter errors and fix them immediately.
- If unsure, default to the most common convention in the codebase.

#### 3. Handle State, Async, and Side Effects Carefully

- For React/React Native: Always check for necessary state updates, effect dependencies, and async error handling.
- Ensure that UI, state, and backend are always in sync.

#### 4. Comprehensive Refactoring

- When changing a type, prop, or function signature, search and update *all* usages across the codebase.
- Use semantic and regex search to catch dynamic or less obvious references.

#### 5. Clarify and Confirm Requirements

- If requirements are ambiguous, proactively clarify before coding.
- Summarize your understanding and confirm with the user if there's any doubt.

#### 6. Sync Mock and Real Data Paths

- Ensure that both mock/local and real/API data flows are updated and consistent.
- Remove or update mock data when moving to production logic.

#### 7. Environment Awareness

- Detect and adapt to the user's OS, Node, Expo, and package versions.
- Use the correct commands and scripts for the user's environment.

#### 8. Stay Up-to-Date with APIs

- Check for the latest API/SDK documentation before using third-party services.
- Prefer official, stable endpoints and best practices.

#### 9. Test Thoroughly

- Run all relevant tests after every change.
- If tests are missing, generate comprehensive unit and integration tests.
- Simulate user flows and edge cases, not just the "happy path."

#### 10. Iterative, Human-Like Review

- After making changes, review your own work as if you were a human code reviewer.
- Look for typos, missed updates, and logic errors.
- If possible, run the app or simulate the user experience.

#### 11. Proactive Error Handling

- Anticipate possible runtime errors and handle them gracefully.
- Add user feedback (toasts, alerts) for all error cases.

#### 12. Document and Explain

- Add clear comments for complex logic or non-obvious decisions.
- Summarize what you changed and why after every edit.

#### 13. Minimize Disruption

- Avoid breaking changes unless absolutely necessary.
- If a breaking change is required, communicate it clearly and provide migration steps.

#### 14. Continuous Learning

- If you make a mistake, update your approach and memory so you don't repeat it.
- Learn from user feedback and adapt your strategies.

#### 15. Be Assertive and User-Centric

- Take initiative to fix, test, and verify before asking the user for help.
- Always optimize for the best user experience and developer ergonomics.
- If you're unsure, explain your reasoning and ask for clarification.
- Automate repetitive tasks and use batch updates where possible.

#### 16. Type Safety & Data Validation

- Always validate data structures and types, especially when working with external APIs.
- Use TypeScript interfaces and types consistently across the codebase.
- Handle edge cases where data might be null, undefined, or malformed.
- Add runtime validation for critical data flows.

#### 17. Performance & Optimization Awareness

- Consider the performance impact of changes (re-renders, memory usage, API calls).
- Use React.memo, useMemo, useCallback appropriately.
- Avoid unnecessary API calls or expensive operations.
- Profile and optimize when dealing with large datasets or complex UI.

#### 18. Security & Privacy Best Practices

- Never hardcode sensitive data (API keys, tokens, passwords).
- Validate and sanitize user inputs.
- Follow OAuth 2.0 best practices for token handling.
- Ensure proper error messages don't leak sensitive information.

#### 19. Accessibility & Internationalization

- Include proper accessibility attributes (aria-labels, alt text).
- Consider screen readers and keyboard navigation.
- Plan for internationalization if the app will be used globally.
- Test with different font sizes and contrast ratios.

#### 20. Documentation & Code Comments

- Add JSDoc comments for complex functions.
- Document API endpoints and their expected responses.
- Include setup instructions for new developers.
- Maintain README files with current information.

#### 21. Error Boundaries & Graceful Degradation

- Implement React Error Boundaries for component-level error handling.
- Provide fallback UI when features fail to load.
- Handle network connectivity issues gracefully.
- Show meaningful error messages to users.

#### 22. Version Control & Git Best Practices

- Write clear, descriptive commit messages.
- Consider the impact of changes on git history.
- Avoid committing temporary files or sensitive data.
- Use feature branches for major changes.

#### 23. Monitoring & Observability

- Add appropriate logging for debugging and monitoring.
- Include error tracking for production issues.
- Monitor API response times and failure rates.
- Add analytics for user behavior (with privacy considerations).

#### 24. BugBot Integration & Automated PR Workflow

**MANDATORY WORKFLOW FOR ALL CODE CHANGES:**

- **NEVER make changes directly to the main branch** - Always create a feature branch first
- **ALWAYS follow this exact process** when making any code changes:

1. **Create Feature Branch:**
   - Use descriptive branch names: `feature/description-of-changes`
   - Example: `feature/fix-login-button` or `feature/add-user-profile`

2. **Make Changes:**
   - Implement the requested changes
   - Test thoroughly before committing
   - Follow all existing coding standards

3. **Commit and Push:**
   - Use clear, descriptive commit messages
   - Push the feature branch to GitHub
   - The automated workflow will create a Pull Request

4. **Pull Request Creation:**
   - GitHub Actions automatically creates a PR to main
   - PR includes detailed description with BugBot integration info
   - BugBot automatically reviews the PR (if enabled in Cursor dashboard)

5. **User Notification:**
   - **ALWAYS remind the user to check the PR** on GitHub
   - Provide the direct link to the PR
   - Explain that BugBot will review and add comments
   - Tell user to look for BugBot's feedback

6. **Wait for User Review:**
   - **NEVER merge to main without explicit user permission**
   - Ask user to check BugBot's comments
   - If BugBot finds issues, fix them before merging
   - Only merge after user gives approval

**BugBot Review Process:**
- BugBot scans for security issues, code quality problems, and best practices
- BugBot comments appear on the PR (user must check GitHub to see them)
- If issues found, fix them and update the PR
- If no issues, proceed with user approval

**User Communication:**
- Always explain the process in simple terms
- Provide step-by-step instructions for checking PRs
- Remind user they have full control over what gets merged
- Use clear, non-technical language when explaining

**Example User Message:**
"I've created a Pull Request with your changes. Please check it on GitHub and let me know what BugBot says! The PR is at: [link]. BugBot will review it automatically and add comments if there are any issues."

### If you encounter a new or unexpected issue

- Pause, analyze the root cause, and document it.
- Propose and implement a robust, future-proof solution.
- Update your memory with the new lesson.

### By following these principles, you will deliver robust, maintainable, and user-friendly code with minimal need for corrections

## Project-Specific Rules

### LLM Selection Guidelines

- Use Claude 4 Opus for complex architecture, refactoring, and comprehensive test generation
- Use Gemini 2.5 Pro for UI/UX components, debugging, and front-end development
- Use ChatGPT 4.1 for specific feature implementation and API integration

### User Preferences

- Always minimize shell hanging by adding flags like --silent, --quiet, using background execution, adding || true, and redirecting stderr (2>/dev/null)
- After every change, continue performing background tasks (tests, builds, code quality checks)
- Only build when explicitly approved or requested
- Start emulator to test changes before initiating any build
- Use AI agents that respond quickly for routine tasks, reserve advanced ones for complex tasks
- When user says 'give gemini a report', provide detailed prompt explaining situation and listing all associated files
- App UI should follow top-tier design standards with proper ratios, smooth animations, minimal spacing, polished high-end aesthetic
- Display app name at top of screen like AAA top-tier apps
- Use most current and up-to-date best practices
- Execute tasks automatically before asking user to do anything, then explain what was done
- Always run tests to verify correctness after implementing or modifying code
- Remove temporary or ad-hoc test scripts once no longer needed
- User doesn't know how to code and expects assistant to handle all coding tasks
- Use NPM-based environment, install dependencies via 'npx expo install' after removing node_modules and package-lock.json
- Use custom development client command instead of `npm start`
- Perform tasks capable of rather than instructing user to do them
- Provide assertive, proactive guidance without asking what to do next
- Always check actual code and files thoroughly instead of making assumptions
- Always remove temporary or ad-hoc test scripts once they are no longer needed

#### 25. Comprehensive Refactoring & Usage Update Rule

- Whenever you change a function, type, prop, or core logic:
  - Use both semantic and regex search to find *every* usage of the changed symbol across the entire codebase (including dynamic, indirect, and test usages).
  - Update all imports, calls, tests, mocks, documentation, and configuration files.
  - Make all necessary changes in one batch, not piecemeal. Never leave the codebase in a half-updated state.
  - Check for related helpers, wrappers, and utility functions that may be affected.
  - Run all relevant tests (unit, integration, end-to-end) and generate missing ones.
  - Run the linter and review the codebase for any missed references or warnings.
  - Summarize what was changed, why, and what files/functions were affected.
  - Never consider a refactor or core logic change "done" until all usages and dependencies are updated and tested.

#### 26. Automated Symbol/Usage Mapping

- When making a change, use both semantic and regex search to build a complete map of all usages (including dynamic, indirect, and test usages).
- Always check for usage in comments, documentation, and configuration files.

#### 27. Cross-Platform & Device Testing

- For React Native/Expo: Test changes on both iOS and Android simulators/emulators.
- Consider device-specific edge cases (permissions, file system, notifications, etc.).

#### 28. Dependency & Version Awareness

- When updating or adding dependencies, check for breaking changes, peer dependencies, and compatibility with the current project setup.
- Run `npm audit` or similar tools to check for vulnerabilities after dependency changes.

#### 29. Rollback & Recovery Planning

- For any major or breaking change, provide a clear rollback plan or migration steps.
- If a change could impact user data, ensure there's a backup or recovery strategy.

#### 30. User Feedback Loops

- After deploying significant changes, monitor logs and user feedback for regressions or new issues.
- Be proactive in rolling out hotfixes or patches if problems are detected.

#### 31. Continuous Integration/Continuous Deployment (CI/CD)

- Ensure all changes pass CI checks before merging.
- Automate builds, tests, and deployments where possible.

#### 32. Code Review Simulation

- Before finalizing a change, simulate a code review: check for clarity, maintainability, and adherence to project standards.
- Leave comments or TODOs for future improvements if something can't be addressed immediately.
